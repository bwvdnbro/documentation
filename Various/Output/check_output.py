#!/usr/bin/env python3

"""
check_output.py

Check that the table information from the COLIBRE spreadsheet that was
copied over into Gas.txt, DM.txt, Stars.txt and BH.txt matches the actual
snapshot metadata stored in colibre_actual_output.yml, which can be
generated by running `generate_output_report.py` on a snapshot.
"""

import numpy as np
import yaml

dtype_dict = {
    "float32": "float",
    "float64": "double",
    "int32": "int",
    "int64": "long long",
    "uint8": "char",
    "int8": "char",
}

dsets = None
with open("colibre_actual_output.yml", "r") as handle:
    dsets = yaml.safe_load(handle)

for ptype in dsets:
    data = np.loadtxt(
        f"{ptype}.txt",
        usecols=(0, 1, 2, 3),
        dtype=[
            ("Name", "U100"),
            ("Size", np.uint8),
            ("Type", "U100"),
            ("Compression", "U100"),
        ],
        delimiter="\t",
    )
    for row in data:
        name = f"{row['Name']}_{ptype}"
        shape = row["Size"]
        if shape == 0:
            if name in dsets[ptype]:
                print(f"Dataset {name} present in output but should not be!")
                dsets[ptype][name]["used"] = True
            continue
        if name not in dsets[ptype]:
            print(f"Dataset {name} should be present in output but is not!")
            continue
        dsets[ptype][name]["used"] = True
        dtype = row["Type"]
        compression = row["Compression"]
        dset = dsets[ptype][name]
        adtype = dset["type"]
        if adtype not in dtype_dict:
            print(f'No aliases for data type "{adtype}".')
        else:
            adtype = dtype_dict[adtype]
        if dtype != adtype:
            print(
                f'Data types for dataset {name} do not match! "{dtype}" versus "{adtype}".'
            )
        if shape != dset["shape"]:
            print(
                f"Data shapes for dataset {name} do not match! \"{shape}\" versus \"{dset['shape']}\"."
            )
        if compression != dset["compression"]:
            print(
                f"Data compressions for dataset {name} do not match! \"{compression}\" versus \"{dset['compression']}\"."
            )

for ptype in dsets:
    for dset in dsets[ptype]:
        if "used" not in dsets[ptype][dset]:
            print(f"Dataset {dset} present in output but not mentioned in table!")
